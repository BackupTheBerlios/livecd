#!/bin/busybox ash
#
# LiveCD startup (linuxrc) script
# Copyright (C) 2002-2003, Jaco Greeff <jaco@linuxminicd.org>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Adapted for mklivecd from the MiniCD (http://www.linuxminicd.org) linuxrc script
# The latest version of this script can be found at http://livecd.berlios.de
#
# $Id: linuxrc.in,v 1.47 2003/12/07 16:13:47 jaco Exp $
#

### global variables
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/initrd/bin:/initrd/sbin:/initrd/usr/bin:/initrd/usr/sbin
umask 022
FOUND_MDKISO=""
OPT_MODULES="@DEF_MODULES_OPT@"
DEP_MODULES="@DEF_MODULES_DEP@ @DEF_SCSI_MODULES_DEP@"
SCSI_MODULES="@DEF_SCSI_MODULES@" # these are for the SCSI drivers
FOUND_SCSI=""
BASEIMG="livecd.iso"      # name of the base cloop image, with a .clp (cloop) or .bzlp (bzloop)
                          # extension, this is the compressed loop image
LOOPBEXT=".bzlp"          # extension for the above
LOOPCEXT=".clp"           # extension for the above
LOOPTYPE="$LOOPCEXT"
DEVICES=""                # list of all ide/scsi cd-type devices
FOUNDMEM=200000           # total memory found on box
TOTALMEM=200000           # total usable memory on box
MINSIZE=2000              # Minimum size of additional ram partitions
MINLEFT=16000             # At least this much memory minus 30% should remain when home and var are full.
MAXSIZE=1000000           # maximum ramdisk size
RAMSIZE=1000000           # default ramdisk size
MINRAMSIZE=15000          # the minimum ramdisk size
KERNELVER="@KERNELVER@"   # this is setup via uname -r in the initialise section
MKLIVECDVER="@MKLIVECDVER@"
NAME_VERSION_STR="@NAME_VERSION_STR@"
CLOOPVER="@CLOOPVER@"
MNTCDROM=/cdrom
MNTLIVECD=/loopfs
MNTRAMDISK=/ramfs

### progress indicator
progress_num=0
progress_full=27 # our 5, +5 for rc.sysinit, +17 for hwdetect
progress_on=1
progress_max=65534 # normal: 65534

### screen colors
RES_COL=65
MOVE_TO_COL="echo -en \\033[${RES_COL}G\\033[K"
SETCOLOR_OK="echo -en \\033[1;32m"
SETCOLOR_FAIL="echo -en \\033[1;31m"
SETCOLOR_WARN="echo -en \\033[1;33m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"
SETCOLOR_CLEAR="echo -en \\033c"
SETCOLOR_CEOL="echo -en \\033[0G\\033[K"


### print a success msg
printok() {
	$MOVE_TO_COL
	echo -n "[  "
	$SETCOLOR_OK
	echo -n "OK"
	$SETCOLOR_NORMAL
	echo "  ]"
	return 0
}


### print a loaded success msg
printloaded() {
	$MOVE_TO_COL
	echo -n "["
	$SETCOLOR_OK
	echo -n "LOADED"
	$SETCOLOR_NORMAL
	echo "]"
	return 0
}


### print a warning msg
printwarn() {
	$MOVE_TO_COL
	echo -n "[ "
	$SETCOLOR_WARN
	echo -n "WARN"
	$SETCOLOR_NORMAL
	echo " ]"
	return 0
}


### print a fialure msg
printfail() {
	$MOVE_TO_COL
	echo -n "["
	$SETCOLOR_FAIL
	echo -n "FAILED"
	$SETCOLOR_NORMAL
	echo "]"
	return 0
}


### execute a command/commands printing the sucess or failure msg on completion
docmd() {
	echo -n "$1: "
	shift
	CMD="($1)"
	shift
	while [ $# -gt 0 ]; do
		CMD="$CMD && ($1)"
		shift
	done
	(eval "$CMD") 2>&1 >/dev/null && printok || printfail
}


### load a module
loadmod() {
	MODULE="/lib/modules/$KERNELVER/kernel/$1"
	[ ! -f $MODULE ] && MODULE="/initrd$MODULE"
	[ ! -f $MODULE ] && return 1
	insmod $MODULE $2 2>&1 >/dev/null && return 0 || return 1
}


### set progress bar
set_progress() {
	silent=`grep -i splash=silent /proc/cmdline`
	if [ -e /proc/splash ] && [ -n "$silent" ] && [ -n "$progress_on" ]; then
		progress_num=$(($progress_num+1));
		progress=$(($progress_max*($progress_num+1)/$progress_full));
		echo "show $progress" >/proc/splash
	fi
}


### initialise
initialise() {
	busybox mount -n -t proc none /proc
	busybox --install

	rm -rf /sbin/init
	mv /sbin/init.dynamic /sbin/init

	docmd   "Setting up kernel parameters" \
		"echo '0' >/proc/sys/kernel/printk" \
		"echo '/sbin/modprobe' >/proc/sys/kernel/modprobe" \
		"exec >/dev/console </dev/console 2>&1"
	KERNELVER=`uname -r`
	set_progress
}


### show the welcome message
printwelcome() {
	### now print the welcome screen
#	$SETCOLOR_WARN
#	echo ""
#	echo "Welcome to $NAME_VERSION_STR, $KERNELVER"
#	echo ""
	$SETCOLOR_NORMAL
}


### this is if we are to execute a limited shell
execshell() {
	export HOSTNAME="localhost.localdomain"
	export PS1="$ "
	export PS2="> "
	export PS4="+ "
	echo "6" >/proc/sys/kernel/printk

	# find the best shell available to us at this point
	if [ -e /bin/bash ]; then
		export PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin
		SHELL="/bin/bash"
	elif [ -e /initrd/bin/ash ]; then
		export PATH=/initrd/bin:/initrd/sbin:/initrd/usr/bin:/initrd/usr/sbin
		SHELL="/initrd/bin/ash"
	else
		export PATH=/bin:/sbin:/usr/bin:/usr/sbin
		if [ -e /bin/ash ]; then
			SHELL="/bin/ash"
		else
			SHELL="/bin/busybox ash"
		fi
	fi
	exec $SHELL
}


### find the cloop device
findcloop() {
	# all devices changed to take advantage of devfs
	# cdrom devices
	DEVICES="/dev/cdroms/cdrom?"

	# load basic modules
	echo -n "Loading basic cdrom modules: "
	for i in $OPT_MODULES; do
		loadmod $i
	done
	set_progress

	ALL_LOADED=1
	for i in $DEP_MODULES; do
		loadmod $i || ALL_LOADED=
	done
	[ -n "$ALL_LOADED" ] && printloaded || printfail
	set_progress

	# probe the SCSI devices
	if `grep -iq noscsi /proc/cmdline || echo 1`; then
		echo -n "Probing SCSI devices: "
		SCSI_FOUND=
		for i in $SCSI_MODULES; do
			loadmod $i && SCSI_FOUND=1
		done
		[ -n "$SCSI_FOUND" ] && printloaded || printok
	fi
	set_progress

	# do the loop
	echo -n "Finding compressed loop image: "
	for i in $DEVICES; do
		CDDEV="$i"
		$MOVE_TO_COL
		$SETCOLOR_WARN
		echo -n "$i"
		$SETCOLOR_NORMAL
		if `mount -r -t iso9660 $CDDEV $MNTCDROM 2>&1 >/dev/null`; then
			# try to find either the .clp or .bzlp compressed image
			LOOPTYPE=""
			if [ -f $MNTCDROM/$BASEIMG$LOOPBEXT ]; then
				LOOPTYPE="$LOOPBEXT"
				LOOPMOD="bzloop"
			elif [ -f $MNTCDROM/$BASEIMG$LOOPCEXT ]; then
				LOOPTYPE="$LOOPCEXT"
				LOOPMOD="cloop"
			fi

			# if it exists, load the correct module and mount
			if [ -n "$LOOPTYPE" ] && [ -f $MNTCDROM/$BASEIMG$LOOPTYPE ]; then
				FOUND_MDKISO="$i"
				printok

				echo -n "Loading compressed loop kernel module: "
				loadmod $LOOPMOD.o && printloaded || printfail
				#loadmod $LOOPMOD.o file=$MNTCDROM/$BASEIMG$LOOPTYPE && printloaded || printfail

				# mount the image, also catering for devfs
				echo -n "Mounting uncompressed image on $MNTLIVECD"
				CLOOPDEV="/dev/$LOOPMOD/0"
				if [ -e "$CLOOPDEV" ]; then
					losetup $CLOOPDEV $MNTCDROM/$BASEIMG$LOOPTYPE && \
					mount -r -t iso9660 $CLOOPDEV $MNTLIVECD && CLOOPMNT=1
				fi

				# did we get it?
				if [ -z "$CLOOPMNT" ]; then
					printfail
					$SETCOLOR_FAIL
					echo ""
					echo "ERROR: Unable to mount filesystem uncompressed,"
					echo "       dropping you to a limited shell."
					$SETCOLOR_NORMAL
					execshell
				else
					printok
					break
				fi
			fi
			`umount $MNTCDROM 2>&1 >/dev/null`
		fi
	done
	if [ -z "$FOUND_MDKISO" ]; then
		printfail
		$SETCOLOR_FAIL
		echo ""
		echo "ERROR: Unable to find the compressed CD filesystem,"
		echo "       dropping you to a limited shell."
		$SETCOLOR_NORMAL
		execshell
	fi
	set_progress
}


### create /initrd/ramfs
createramdisk() {
	# how much memory do we have?
	echo -n "Calculating usable memory"
	FOUNDMEM="$(awk '/MemTotal/{print $2}' /proc/meminfo)"
	TOTALMEM="$(awk 'BEGIN{m=0};/MemFree|Cached/{m+=$2};END{print m}' /proc/meminfo)"
	MAXSIZE="$(expr $TOTALMEM - $MINLEFT)"
	RAMSIZE="$(expr $TOTALMEM / 5)"
	[ -z "$RAMSIZE" ] && RAMSIZE=$MINRAMSIZE
	[ $RAMSIZE -lt $MINRAMSIZE ] && RAMSIZE=$MINRAMSIZE
	#RAMSIZE=$(expr $RAMSIZE \* 4) # tmpfs/varsize version, can use swap
	echo -n " (${RAMSIZE}/${TOTALMEM}/${FOUNDMEM}kB)"
	printok

	# Check for sufficient memory to mount extra ramdisk for /etc, /home, /root, /var
	if test -n "$TOTALMEM" -a "$TOTALMEM" -gt "$MINLEFT"; then
		docmd   "Creating root filesystem (${RAMSIZE}/${FOUNDMEM}kB) on /dev/shm" \
			"mount -t tmpfs -o 'size=${RAMSIZE}k' /dev/shm $MNTRAMDISK" \
			"mkdir -p $MNTRAMDISK/initrd" \
			"echo '0x0100' >/proc/sys/kernel/real-root-dev" \
			"pivot_root $MNTRAMDISK $MNTRAMDISK/initrd" \
			"mkdir -p /proc && mount -n -t proc none /proc" \
			"mkdir -p /dev && mount -n -o bind /initrd/dev /dev" \
			"cd /" \
			"ln -s /initrd/bin" \
			"ln -s /initrd/etc" \
			"ln -s /initrd/lib" \
			"ln -s /initrd/sbin" \
			"ln -s /initrd/usr"
		set_progress
	else
		$SETCOLOR_FAIL
		echo ""
		echo "ERROR: Insufficient memory to create ramdisk,"
		echo "       dropping you to a limited shell."
		$SETCOLOR_NORMAL
		execshell
	fi
}

### main script entry point
initialise    ""
printwelcome  ""
findcloop     ""
createramdisk ""
exit 0
