#!/initrd/bin/ash
#
# LiveCD init (rc.sysinit) script
#
# Copyright (C) 2003-2004, Jaco Greeff <jaco@linuxminicd.org>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# The latest version of this script can be found at http://livecd.berlios.de
#
# $Id: rc.sysinit.in,v 1.9 2004/01/08 07:25:47 jaco Exp $
#

export PATH=/initrd/bin:/initrd/sbin:/initrd/usr/bin:/initrd/usr/sbin:/bin:/sbin:/usr/bin:/usr/sbin

MNTCDROM=/initrd/cdrom
MNTLIVECD=/initrd/loopfs
KERNELVER=`uname -r`

### screen colors
RES_COL=65
MOVE_TO_COL="echo -en \\033[${RES_COL}G\\033[K"
SETCOLOR_OK="echo -en \\033[1;32m"
SETCOLOR_FAIL="echo -en \\033[1;31m"
SETCOLOR_WARN="echo -en \\033[1;33m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"
SETCOLOR_CLEAR="echo -en \\033c"
SETCOLOR_CEOL="echo -en \\033[0G\\033[K"

### progress indicator
progress_num=@VAL_SPLASH_LINUXRC@
progress_full=@VAL_SPLASH_FULL@
progress_max=@MAX_SPLASH@
progress_on=1

### print a success msg
printok() {
	$MOVE_TO_COL
	echo -n "[  "
	$SETCOLOR_OK
	echo -n "OK"
	$SETCOLOR_NORMAL
	echo "  ]"
	return 0
}


### print a loaded success msg
printloaded() {
	$MOVE_TO_COL
	echo -n "["
	$SETCOLOR_OK
	echo -n "LOADED"
	$SETCOLOR_NORMAL
	echo "]"
	return 0
}


### print a warning msg
printwarn() {
	$MOVE_TO_COL
	echo -n "[ "
	$SETCOLOR_WARN
	echo -n "WARN"
	$SETCOLOR_NORMAL
	echo " ]"
	return 0
}


### print a fialure msg
printfail() {
	$MOVE_TO_COL
	echo -n "["
	$SETCOLOR_FAIL
	echo -n "FAILED"
	$SETCOLOR_NORMAL
	echo "]"
	return 0
}


### execute a command/commands printing the sucess or failure msg on completion
docmd() {
	echo -n "$1: "
	shift
	CMD="($1)"
	shift
	while [ $# -gt 0 ]; do
		CMD="$CMD && ($1)"
		shift
	done
	#(eval "$CMD") && printok || printfail
	(eval "$CMD") 2>&1 >/dev/null && printok || printfail
}


### load a module
loadmod() {
	EXT=".o"
	MODULE="/lib/modules/$KERNELVER/kernel/$1$EXT"
	[ ! -f $MODULE ] && MODULE="/initrd$MODULE"
	[ ! -f $MODULE ] && return 1
	insmod $MODULE $2 2>&1 >/dev/null && return 0 || return 1
}


### set progress bar
set_progress() {
	silent=`grep -i splash=silent /proc/cmdline`
	if [ -e /proc/splash ] && [ -n "$silent" ] && [ -n "$progress_on" ]; then
		progress_num=$(($progress_num+1));
		progress=$(($progress_max*($progress_num+1)/$progress_full));
		echo "show $progress" >/proc/splash
	fi
}

### function to get the value of an option from the kernel command line
getbootoption() {
	option="$1"
	val=`$MNTLIVECD/bin/sed -r -e "s/(.*)${option}=([[:alnum:]-]*)(.*)/\2/i" /proc/cmdline`
	if [ -n "$val" -a "$val" != "`$MNTLIVECD/bin/cat /proc/cmdline`" ]; then
		echo $val
		return 0
	else
		return 1
	fi
}

### this is if we are to execute a limited shell
execshell() {
	export HOSTNAME="localhost.localdomain"
	export PS1="$ "
	export PS2="> "
	export PS4="+ "
	echo "6" >/proc/sys/kernel/printk

	# find the best shell available to us at this point
	if [ -e /bin/bash ]; then
		export PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin
		SHELL="/bin/bash"
	elif [ -e /initrd/bin/ash ]; then
		export PATH=/initrd/bin:/initrd/sbin:/initrd/usr/bin:/initrd/usr/sbin
		SHELL="/initrd/bin/ash"
	fi
	exec $SHELL
}


### Setup the root fs
setuproot() {
	# setup translucency (if available)
	# Note: for some obscure reason the static insmod cannot
	#       insert the module, the dynamic version can
	transmod="/lib/modules/$KERNELVER/kernel/translucency.o"
	if [ -f $transmod ]; then
		kmin=`echo $KERNELVER | awk -F'.' '{ print $2 }'`
		[ $kmin -gt 4 ] && kmin=5
		$MNTLIVECD/sbin/insmod-2$kmin $transmod 2>&1 >/dev/null
	fi
	set_progress

	if [ -d /proc/sys/translucency ]; then
		ltmp="/tmp/livecd"
		docmd   "Building root filesystem" \
			"cd /" \
			"touch fastboot" \
			"cd $MNTLIVECD ; \
			for d in *; do \
				if [ -d $MNTLIVECD/\$d ]; then \
					case \$d in \
						dev|proc|mnt|tmp) \
							;;
						*) \
							ln -sf $MNTLIVECD/\$d /\$d || true; \
							;; \
					esac \
				fi \
			done" \
			"mkdir -p /mnt/cdrom && mount -n -o bind $MNTCDROM /mnt/cdrom" \
			"mkdir -p /tmp && chmod 777 /tmp"
		set_pogress
		docmd   "Creating filesystem overlay" \
			"for t in etc home lib root usr var; do mkdir -p $ltmp/\$t ; done" \
			"echo '$MNTLIVECD/etc -> $ltmp/etc' >/proc/sys/translucency/0" \
			"echo '$MNTLIVECD/home -> $ltmp/home' >/proc/sys/translucency/1" \
			"echo '$MNTLIVECD/lib -> $ltmp/lib' >/proc/sys/translucency/2" \
			"echo '$MNTLIVECD/root -> $ltmp/root' >/proc/sys/translucency/3" \
			"echo '$MNTLIVECD/usr -> $ltmp/usr' >/proc/sys/translucency/4" \
			"echo '$MNTLIVECD/var -> $ltmp/var' >/proc/sys/translucency/5"
		set_progress
		docmd   "Creating /var structure" \
			"mkdir -p /var/lock/subsys" \
			"mkdir -p /var/log && touch /var/log/wtmp" \
			"mkdir -p /var/run && touch /var/run/utmp" \
			"mkdir -p /var/tmp"
		set_progress
		docmd   "Creating /etc structure" \
			"rm -rf /etc && mkdir -p /etc/livecd/hwdetect" \
			"echo 'none      /proc proc  defaults 0 0' >/etc/fstab" \
			"echo 'none      /dev  devfs defaults 0 0' >>/etc/fstab" \
			"echo '/dev/rd/3 /     ext2  defaults 0 0' >>/etc/fstab" \
			"rm -rf /etc/mtab && touch /etc/mtab" \
			"rm -rf /etc/modules.conf && touch /etc/modules.conf" \
			"echo '#!/bin/bash' >/usr/share/harddrake/service_harddrake" \
			"echo 'exit 0' >>/usr/share/harddrake/service_harddrake"
		set_progress
	else
		docmd   "Building root filesystem" \
			"cd /" \
			"touch fastboot" \
			"rm -rf /lib && mkdir -p /lib" \
			"cd $MNTLIVECD/lib ; \
			for f in *; do \
				case \$f in \
					dev-state) \
						mkdir -p /lib/\$f ; \
						;; \
					modules) \
						mkdir -p /lib/\$f ; \
						for k in \$f/*; do \
							if \`echo \$k | grep -q \$f/$KERNELVER\`; then \
								mkdir -p /lib/\$k ; \
								for s in \$k/*; do \
									if [ -f $MNTLIVECD/lib/\$s ]; then \
										cp $MNTLIVECD/lib/\$s /lib/\$s ; \
										chmod 644 /lib/\$s ; \
									else \
										mkdir -p /lib/\$s ; \
										for d in \`find \$s -type d\`; do \
											mkdir -p /lib/\$d || true; \
											for m in \$d/*; do \
												[ -f $MNTLIVECD/lib/\$m ] && ln -sf $MNTLIVECD/lib/\$m /lib/\$m || true; \
											done \
										done \
									fi \
								done \
							else \
								ln -sf $MNTLIVECD/lib/\$k /lib/\$k || true; \
							fi \
						done \
						;; \
					*) \
						ln -sf $MNTLIVECD/lib/\$f /lib/\$f || true; \
						;; \
				esac \
			done" \
			"rm -rf /bin && ln -sf $MNTLIVECD/bin" \
			"rm -rf /boot && ln -sf $MNTLIVECD/boot" \
			"rm -rf /opt && ln -sf $MNTLIVECD/opt" \
			"rm -rf /sbin && ln -sf $MNTLIVECD/sbin" \
			"rm -rf /usr && ln -sf $MNTLIVECD/usr" \
			"mkdir -p /mnt && ln -sf $MNTCDROM /mnt/cdrom" \
			"mkdir -p /tmp && chmod 777 /tmp"
		set_progress
		docmd   "Creating /var structure" \
			"rm -rf /var && mkdir -p /var" \
			"for d in \`find $MNTLIVECD/var/ -type d\`; do \
				d=\${d#$MNTLIVECD/var/} ; \
				case \$d in \
					lib/rpm*|lib/urpmi*|lib/samba*|lib/mysql*) \
						[ ! -e /var/\$d ] && ln -sf $MNTLIVECD/var/\$d /var/\$d || true; \
						;; \
					cache*|db*|lib*|local*|lock*|log*|mail*|mtink*|nis*|opt*|preserve*|run*|spool*|yp*) \
						mkdir -p /var/\$d || true ; \
						$MNTLIVECD/bin/chown --reference=$MNTLIVECD/var/\$d /var/\$d ; \
						$MNTLIVECD/bin/chmod --reference=$MNTLIVECD/var/\$d /var/\$d ; \
						;; \
					tmp*) \
						;; \
					*) \
						[ ! -e /var/\$d ] && ln -sf $MNTLIVECD/var/\$d /var/\$d || true; \
						;; \
				esac \
			done" \
			"mkdir -p /var/lock/subsys" \
			"mkdir -p /var/log && touch /var/log/wtmp" \
			"mkdir -p /var/run && touch /var/run/utmp" \
			"ln -sf /tmp /var/tmp"
		set_progress
		docmd   "Creating /etc structure" \
			"rm -rf /etc && cp -a $MNTLIVECD/etc /" \
			"mkdir -p /etc/livecd/hwdetect" \
			"chmod a+rw /etc" \
			"rm -rf /etc/fstab && touch /etc/fstab" \
			"echo 'none      /proc proc  defaults 0 0' >/etc/fstab" \
			"echo 'none      /dev  devfs defaults 0 0' >>/etc/fstab" \
			"echo '/dev/rd/3 /     ext2  defaults 0 0' >>/etc/fstab" \
			"rm -rf /etc/mtab && touch /etc/mtab" \
			"rm -rf /etc/modules.conf && touch /etc/modules.conf" \
			"rm -rf /etc/rc.d/rc3.d/S05harddrake" \
			"rm -rf /etc/rc.d/rc5.d/S05harddrake"
		set_progress
		docmd   "Creating user directories" \
			"cp -a $MNTLIVECD/root /" \
			"cp -a $MNTLIVECD/home /"
		set_progress
	fi
}

### setup for init of the actual mdk image
setupinit() {
	# perform hwdetect if not disabled
	if `/bin/grep -iqv hwdetect=no /proc/cmdline`; then
		OLDPATH=$PATH
		export PATH=/sbin:/usr/sbin:/bin:/usr/bin
		/initrd/usr/sbin/hwdetect
		export PATH=$OLDPATH
	fi

	# Don't run depmod (must be run before imaging system)
	/bin/sed -i -e 's/action.*depmod/true/g' /etc/rc.d/rc.sysinit

	# Do various other configuration tasks (now that /etc is available)
	if hostname=`getbootoption hostname`
	then
		/bin/sed -i.livecd -e "s/\(\S*HOSTNAME=\).*/\1${hostname}/g" /etc/sysconfig/network
		/bin/sed -i.livecd -e "s/\(\S*DHCP_HOSTNAME=\).*/\1${hostname}/g" /etc/sysconfig/network-scripts/ifcfg-eth*
	fi

	#clean up the shutdown sequence:
	/bin/sed -i.livecd -e 's,\(.*\S*awk\S*.*\)\(\/.*\)\/.*\({next}.*$\),\1\2|\^\\\/initrd\\\/\.\*\/\3,;s,/sbin/halt.local,/initrd/sbin/halt.local,g;s,^\(runcmd.*mount.*proc.*\),#\1,g;s,   /initrd/sbin/halt.local,   exec /initrd/sbin/halt.local \$command,g' /etc/rc.d/init.d/halt

	# restart the splash before MDK init (this is very hacky)
	silent=`/bin/grep -i splash=silent /proc/cmdline`
	if [ $progress_max -eq 65534 ] && [ -e /proc/splash ] && [ -n "$silent" ] && [ -n "$progress_on" ]; then
		echo 0 > /proc/splash
		. /etc/sysconfig/bootsplash
		res=`/bin/fbresolution`
		[ -f /etc/bootsplash/themes/$THEME/config/bootsplash-$res.cfg ] && /sbin/splash -s -u 0 /etc/bootsplash/themes/$THEME/config/bootsplash-$res.cfg
		echo "silent" >/proc/splash
	fi

	# do we just want to complete the initrd (debug)?
	if `/bin/grep -iq livecd=initrd /proc/cmdline`; then
		# exit, allowing us to debug
		execshell
	else
		# clean up /proc (init mounts it via rc.sysinit)
		docmd   "Unmounting /proc filesystem" \
			"umount /proc"

		# display some info
		distro=`/bin/cat /etc/redhat-release | awk '{ print $1 }'`
		echo "Starting $distro Linux init sequence ..."

		# setup the full path as now available and start distro boot
		export PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin
		exec /etc/rc.d/rc.sysinit
	fi
}

setuproot ""
setupinit ""
exit 0
