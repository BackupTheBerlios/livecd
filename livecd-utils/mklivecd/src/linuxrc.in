#!/bin/busybox ash
#
# LiveCD startup (linuxrc) script
#
# Copyright (C) 2002-2004, Jaco Greeff <jaco@puxedo.org>
# Copyright (C) 2003, Buchan Milne <bgmilne@obsidian.co.za>
# Copyright (C) 2004, Tom Kelly  <tom_kelly33@yahoo.com>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Adapted for mklivecd from the MiniCD (http://www.linuxminicd.org) linuxrc script
# The latest version of this script can be found at http://livecd.berlios.de
#
# $Id: linuxrc.in,v 1.1 2007/12/09 23:03:41 didouph Exp $
#

### global variables
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/initrd/bin:/initrd/sbin:/initrd/usr/bin:/initrd/usr/sbin
umask 022
DEBUG=
FOUND_ISO=""
OPT_MODULES="@DEF_MODULES_OPT_26@"
DEP_MODULES="@DEF_MODULES_26@ @DEF_MODULES_DEP_26@"
SCSI_MODULES="@DEF_SCSI_MODULES_DEP_26@ @DEF_SCSI_MODULES_26@ @DEF_SCSI_MODULES_OPT_26@" # these are for the SCSI drivers
USB_MODULES="@DEF_USB_MODULES_26@"
USB_MODULES_DRV="@DEF_USB_MODULES_DRV_26@"

CDROM_LIST=""
BASEIMG="livecd"          # name of the base cloop image, with a .sqfs (squashfs) extension
LOOPSEXT=".sqfs"
ISOTYPE="iso9660"
MEDIACHECK="isolinux/mediacheck"
DEVICES=""                # list of all ide/scsi cd-type devices
FOUNDMEM=200000           # total memory found on box
TOTALMEM=200000           # total usable memory on box
MINSIZE=2000              # Minimum size of additional ram partitions
MINLEFT=16000             # At least this much memory minus 30% should remain when home and var are full.
MAXSIZE=1000000           # maximum ramdisk size
RAMSIZE=1000000           # default ramdisk size
MINRAMSIZE=15000          # the minimum ramdisk size
KERNELVER="@KERNELVER@"   # this is setup via uname -r in the initialise section
MKLIVECDVER="@MKLIVECDVER@"
NAME_VERSION_STR="@NAME_VERSION_STR@"
CLOOPVER="@CLOOPVER@"

#common variables 

MNTCDROM=initrd/cdrom
MNTLIVECD=initrd/loopfs
MNTRAMDISK=/ramfs
KERNEL26=1
MODEXT=".ko"

### progress indicator
progress_num=0
progress_full=@VAL_SPLASH_FULL@
progress_max=32768
progress_on=1

### screen colors
RES_COL=65
MOVE_TO_COL="echo -en \\033[${RES_COL}G\\033[K"
SETCOLOR_OK="echo -en \\033[1;32m"
SETCOLOR_FAIL="echo -en \\033[1;31m"
#SETCOLOR_WARN="echo -en \\033[1;33m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"
#SETCOLOR_CLEAR="echo -en \\033c"
#SETCOLOR_CEOL="echo -en \\033[0G\\033[K"

#common (library) functions

### print a success msg
printok() {
        $MOVE_TO_COL
        echo -n "[  "
        $SETCOLOR_OK
        echo -n "OK"
        $SETCOLOR_NORMAL
        echo "  ]"
        return 0
}

### print a loaded success msg
printloaded() {
        $MOVE_TO_COL
        echo -n "["
        $SETCOLOR_OK
        echo -n "LOADED"
        $SETCOLOR_NORMAL
        echo "]"
        return 0
}


### print a warning msg
#printwarn() {
#        $MOVE_TO_COL
#        echo -n "[ "
#        $SETCOLOR_WARN
#        echo -n "WARN"
#        $SETCOLOR_NORMAL
#        echo " ]"
#        return 0
#}


### print a failure msg
printfail() {
        $MOVE_TO_COL
        echo -n "["
        $SETCOLOR_FAIL
        echo -n "DONE"
        $SETCOLOR_NORMAL
        echo "]"
        return 0
}

### print error message and exit to limited shell
printfatal() {
	printfail
	$SETCOLOR_FAIL
	echo ""
	echo "$1"
	shift
	while [ $# -gt 0 ]; do
		echo "$1"
		shift
	done
	echo ""
	echo "       Dropping you to a limited shell."
	$SETCOLOR_NORMAL
	execshell
}

### execute a command/commands printing the success or failure msg on completion
docmd() {
        echo -n "$1: "
        shift
        CMD="($1)"
        shift
        while [ $# -gt 0 ]; do
                CMD="$CMD && ($1)"
                shift
        done
        (eval "$CMD") 2>&1 >/dev/null && printok || printfail
}


### load a module
loadmod() {
        MODULE="/lib/modules/$KERNELVER/kernel/$1$MODEXT"
        [ ! -f $MODULE ] && MODULE="/initrd$MODULE"
        [ ! -f $MODULE ] && return 1
        if [ -n "$DEBUG" ]; then
                RET=0
                echo -n "$MODULE: "
                #insmod $MODULE $2 && RET=0 || RET=1
		modprobe $1 $2 && RET=0 || RET=1
                echo "($RET)"
                return $RET
        else
                #(insmod $MODULE $2 2>&1)>/dev/null && return 0 || return 1
		(modprobe $1 $2 2>&1)>/dev/null && return 0 || return 1
        fi
}


### set progress bar
set_progress() {
        silent=`grep -i splash=silent /proc/cmdline`
        if [ -e /proc/splash ] && [ -n "$silent" ] && [ -n "$progress_on" ]; then
                progress_num=$(($progress_num+1));
                progress=$(($progress_max*($progress_num+1)/$progress_full));
                echo "show $progress" >/proc/splash
        fi
}

dbg()
{
    if [ -n "$DEBUG" ]; then
       	echo
       	$SETCOLOR_FAIL
       	echo -e "DBG: ${@}"
       	$SETCOLOR_NORMAL
       	echo
#	/bin/ash
    fi 
}

### this is if we are to execute a limited shell
execshell() {
        export HOSTNAME="localhost.localdomain"
        export PS1="$ "
        export PS2="> "
        export PS4="+ "
        echo "6" >/proc/sys/kernel/printk

        # find the best shell available to us at this point
        if [ -e /bin/bash ]; then
                echo "  Loading /bin/bash"
                export PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin
                SHELL="/bin/bash"
        elif [ -e /initrd/bin/ash ]; then
                echo "  Loading /initrd/bin/ash"
                export PATH=/initrd/bin:/initrd/sbin:/initrd/usr/bin:/initrd/usr/sbin
                SHELL="/initrd/bin/ash"
        else
                export PATH=/bin:/sbin:/usr/bin:/usr/sbin
                if [ -e /bin/ash ]; then
                        echo "  Loading /bin/ash"
                        SHELL="/bin/ash"
                else
                        echo "  Loading /bin/busybox ash"
                        SHELL="/bin/busybox ash"
                fi
        fi
        exec $SHELL
}

mountit(){
# Usage: mountit src dst "options"
    	  BUILTIN_FS="iso9660 vfat ext3 ext2 msdos reiserfs ntfs"
    	  for fs in $BUILTIN_FS; do
        	test -b $1 && mount -t $fs $3 $1 $2 >/dev/null 2>&1 && return 0
    	  done
    	  return 1
}

load_usb_modules(){
	## Probe the USB devices.
	echo -n  "  Starting USB support: "
	printok
	dousb=`grep -iq nousb /proc/cmdline || echo 1`
	if [ -n "$dousb" ]; then
		echo -n "  Probing USB devices: "
        	USB_FOUND=1
		for i in $USB_MODULES; do
			loadmod $i || USB_FOUND=
        	done

        	for i in $USB_MODULES_DRV; do
			loadmod $i
        	done
        	sleep 2
        	[ -n "$USB_FOUND" ] && printloaded || printok
	fi
	set_progress
	sleep 6
}

load_scsi_modules(){
	#find_scsi_cdroms
	## Probe the SCSI devices.
	doscsi=`grep -iq noscsi /proc/cmdline || echo 1`
	if [ -n "$doscsi" ]; then
		echo -n "  Probing SCSI devices: "
		SCSI_FOUND=
		for i in $SCSI_MODULES; do
			loadmod $i && SCSI_FOUND=1
		done
		sleep 2
		[ -n "$SCSI_FOUND" ] && printloaded || printok
	fi
}

### function to get the value of an option from the kernel command line
#getbootoption() {
#	option="$1"
#	val=`$MNTLIVECD/bin/sed -r -e "s/(.*)${option}=([[:alnum:]-]*)(.*)/\2/i" /proc/cmdline`
#	if [ -n "$val" -a "$val" != "`$MNTLIVECD/bin/cat /proc/cmdline`" ]; then
#		echo $val
#		return 0
#	else
#		return 1
#	fi
#}

### function to check for an option from the kernel command line
#checkbootoption() {
#	if [ `grep -iq $1 /proc/cmdline` ]; then
#		return 0
#	else
#		return 1
#	fi
#}

#--------------------------------------------------------------------#
# Linuxrc subroutines                                                #
# Display debugging info if debug is on. Allow extended echo chars.  #
#--------------------------------------------------------------------#

### initialise
initialise() {
        busybox mount -n -t proc none /proc
        busybox --install

        echo "--- MKLIVECD LINUXRC ---------------"
        rm -rf /sbin/init
        mv /sbin/init.dynamic /sbin/init

        docmd   "  Setting up kernel parameters" \
                "echo '0' >/proc/sys/kernel/printk" \
                "echo '/sbin/modprobe' >/proc/sys/kernel/modprobe" \
                "exec >/dev/console </dev/console 2>&1"

        # some kernel specifics
        KERNELVER=`uname -r`

        # Unhide the udev files
        docmd "  Restoring udev files" \
        "mv /sbin/tmp/* /sbin"

        # debugging?
	DEBUG=`grep -iq debug /proc/cmdline && echo 1`
        set_progress
}


find_cdroms() {
	# modprobe kernel modules needed for the LiveCD
	## Initialise
	echo -n "  Loading basic cdrom modules for Kernel: "
	## Load basic modules
	for i in $OPT_MODULES; do
		loadmod $i
	done
	set_progress

	ALL_LOADED=1
	for i in $DEP_MODULES; do
		loadmod $i || ALL_LOADED=
	done
	[ -n "$ALL_LOADED" ] && printloaded || printfail
	set_progress

	## Load the compressed loop module
        echo -n "  Loading compressed loop module: "
        loadmod squashfs && printloaded || printfail

	## Do we want to boot from USB?
	usblive=`grep -iq fromusb /proc/cmdline && echo 1`
	if [ -n "$usblive" ]; then
		## Make sure the usb modules loaded first, that the stick would acquire the sda address	
		echo -n " Booting from USB "
		rm -rf /initrd/sbin/halt.local
		load_usb_modules
		load_scsi_modules
	else
		load_scsi_modules
		load_usb_modules
	fi

	## Kernel 26 udev additions
	## Search for cdrom devices and add them to CDROM_LIST
	## Check for ide channels.

	if [ ! -e /sbin/udevstart ]; then
		#echo -n "  Starting mdev: "
		# make needed device
		mknod /dev/console c 5 1
		# Run Busybox mdev to create devices
		# echo "Listing of /dev before running mdev: "; cd /dev; ls -l; cd /
		mdev -s
		# echo "Listing of /dev after running mdev: "; cd /dev; ls -l; cd /
		#echo /sbin/mdev > /proc/sys/kernel/hotplug
	else
		#echo -n "  Starting udev: "
		/sbin/udevstart
	fi

	if [ -n "$usblive" ]; then
		## Check for usb stick
		for usb_device in /dev/sd[a-h][0-2]; do
			if [ -e "$usb_device" ]; then
				CDROM_LIST="$CDROM_LIST $usb_device"
			fi
		done
	else	
		for ide_channel in /proc/ide/ide[0-9]; do
			## If there are no ide channels found, then skip this
			if [ ! -d "$ide_channel" ]; then
				echo "  No ide channels found"
				break
			fi

			## Try each ide device to see if we can find the cd-rom drive (up to 20 - hdt)
			for ide_device in hda hdb hdc hdd hde hdf hdg hdh hdi hdj hdk hdl hdm hdn hdo hdp hdq hdr hds hdt; do
				device_media_file="$ide_channel/$ide_device/media"
				if [ -e "$device_media_file" ]; then
					grep -i "cdrom" $device_media_file > /dev/null 2>&1
					if [ $? -eq 0 ]; then
						CDROM_LIST="$CDROM_LIST /dev/$ide_device"
					fi
                       		fi
			done
		done

		## Check for scsi cds, usb cd, usb flash
		#for scsi_cdrom in /dev/scd[0-99] /dev/sr[0-99] /dev/sd[a-t][0-99]; do
		for scsi_cdrom in /dev/hd[a-t][0-99] /dev/sd[a-t][0-99] /dev/scd[0-99] /dev/sr[0-99]; do
			if [ -e "$scsi_cdrom" ]; then
				CDROM_LIST="$CDROM_LIST $scsi_cdrom"
			fi
		done

		printok
		set_progress
	fi
}

### check the MD5 sum of the cloop iso image
checkmd5() {
        if [ -f $MNTCDROM/$MEDIACHECK ]; then
                domd5=`grep -iq md5sum /proc/cmdline && echo 1`
                if [ -n "$domd5" ]; then
                        echo -n "  Verifying MD5 checksum of iso image: "
                        $MNTCDROM/$MEDIACHECK $CDDEV && printok || printfail
                fi
        fi
}


findcloop() {
        ## Now try to find and mount the boot CD (we use ID as identification)
        echo -n "  Searching for the loop image: "
        PRINTK=`cat /proc/sys/kernel/printk`
        echo "0" >/proc/sys/kernel/printk
        for i in $1; do
                CDDEV="$i"
                $MOVE_TO_COL
                $SETCOLOR_OK
                echo "$i"
                $SETCOLOR_NORMAL
                if mountit $CDDEV $MNTCDROM ; then
                        dbg "Mounted $CDDEV\n"
                        # try to find either the .sqfs loop image
                        LOOPTYPE=""
                        if [ -f $MNTCDROM/$BASEIMG$LOOPSEXT ]; then
                                LOOPTYPE="$LOOPSEXT"
                                DEVLOOP="/dev/loop0"
                                LOOPMOD="squashfs"
                                ISOTYPE="squashfs"
                        fi

                        # if it exists, load the correct module and mount
                        if [ -n "$LOOPTYPE" ]; then
                        FOUND_ISO="$i"
                                printok
                                checkmd5 ""

                                echo -n "  Mounting loop image on /$MNTLIVECD: "
                                if [ -e "$DEVLOOP" ]; then
                                        losetup $DEVLOOP $MNTCDROM/$BASEIMG$LOOPTYPE 
                                        mount -r -t $ISOTYPE $DEVLOOP $MNTLIVECD && LOOPMNT=1
                                fi

                                ## Did we get it?
                                if [ -z "$LOOPMNT" ]; then ## -z (null because mount failed)
                                        printfatal "ERROR: Unable to mount loop filesystem," \
                                        "  Commands were:" \
                                        "  losetup $DEVLOOP $MNTCDROM/$BASEIMG$LOOPTYPE" \
                                        "  mount -r -t $ISOTYPE $DEVLOOP $MNTLIVECD" \
					"  Most likely cause is bad burn or bad download" \
					"  Please run mediacheck on livecd" 
                                else
                                        ## Yes, we got it!
					# do we want copy2ram?
					toram=`grep -iq copy2ram /proc/cmdline && echo 1`
					if [ -n "$toram" ]; then
						RAMDIR="/initrd/livecd.ram"
						mkdir -p $RAMDIR
						# make sure we have enough room for the image
						IMAGESIZE=`ls -l $MNTCDROM/livecd.sqfs | awk '{print $5+1000000}'`
						mount -t tmpfs -o "size=$IMAGESIZE" tmpfs $RAMDIR
						if [ "$?" -eq 0 ]; then
							# copy the livecd.sqfs image to a tmpfs directory to be used as the new MNTCDROM
							echo -n 
							echo -n " Copying to memory, please stand by..."
							cp -R $MNTCDROM/livecd.sqfs $RAMDIR
							if [ "$?" -eq 0 ]; then
								printok
								# free the boot device
								umount $MNTLIVECD
								umount $MNTCDROM
								# and use our new directory as the new MNTLIVECD
								`losetup -d $DEVLOOP 2>&1 >/dev/null`
								losetup $DEVLOOP $RAMDIR/livecd.sqfs
								mount -r -t squashfs $DEVLOOP $MNTLIVECD
								rm -rf /initrd/sbin/halt.local
							else
								`umount $RAMDIR 2>&1 >/dev/null`
								echo -n "copy 2 ram was unsuccesfull"
								printfail
							fi
						else
							`umount $RAMDIR 2>&1 >/dev/null`
							echo -n "the iso is larger than the available ram"
							printfail
						fi
					fi
					printok
                                        break
                                fi
                        fi
                        `umount $MNTCDROM 2>&1 >/dev/null`
                fi
        done
        echo "$PRINTK" >/proc/sys/kernel/printk
}

### create /initrd/ramfs
createramdisk() {
        # how much memory do we have?
        echo -n "  Creating ramdisk -  usable memory"
        FOUNDMEM="$(awk '/MemTotal/{print $2}' /proc/meminfo)"
        TOTALMEM="$(awk 'BEGIN{m=0};/MemFree|Cached/{m+=$2};END{print m}' /proc/meminfo)"
        MAXSIZE="$(expr $TOTALMEM - $MINLEFT)"
        RAMSIZE="$(expr $TOTALMEM / 2)"
        [ -z "$RAMSIZE" ] && RAMSIZE=$MINRAMSIZE
        [ $RAMSIZE -lt $MINRAMSIZE ] && RAMSIZE=$MINRAMSIZE
        echo -n " (${RAMSIZE}/${TOTALMEM}/${FOUNDMEM}kB)"
        printok

        # Check for sufficient memory to mount extra ramdisk for /etc, /home, /root, /var
        if test -n "$TOTALMEM" -a "$TOTALMEM" -gt "$MINLEFT"; then
                docmd   "  Creating 2.6 root filesystem (${RAMSIZE}/${FOUNDMEM}kB) on /dev/shm" \
                        "mkdir -p $MNTRAMDISK" \
                        "mount -t tmpfs -o 'size=${RAMSIZE}k' /dev/shm $MNTRAMDISK" \
                        "mkdir -p $MNTRAMDISK/initrd" \
                        "echo '0x0100' >/proc/sys/kernel/real-root-dev" \
                        "pivot_root $MNTRAMDISK $MNTRAMDISK/initrd" \
                        "mkdir -p /proc && mount -n -t proc none /proc" \
                        "mkdir -p /sys && mount -n -t sysfs none /sys" \
                        "mkdir -p /tmp && chmod 1777 /tmp" \
			"mkdir -p /media && chmod 755 /media" \
                        "mkdir -p /dev && mount -n -t tmpfs none /dev" \
                        "mkdir -p /dev/pts" \
                        "cd /" \
                        "ln -s /initrd/bin" \
                        "ln -s /initrd/boot" \
                        "ln -s /initrd/etc" \
                        "ln -s /initrd/opt" \
                        "ln -s /initrd/lib" \
                        "ln -s /initrd/sbin" 

                docmd   "  Making extra nodes" \
                        "ln -s /proc/self/fd /dev/fd" \
                        "ln -s /proc/self/fd/0 /dev/stdin" \
                        "ln -s /proc/self/fd/1 /dev/stdout" \
                        "ln -s /proc/self/fd/2 /dev/stderr" \
                        "ln -s /proc/kcore /dev/core" 

                        if [ ! -x /sbin/hotplug ]; then
                                echo /sbin/udev > /proc/sys/kernel/hotplug
                        fi

                set_progress
        else
                printfatal "ERROR: Insufficient memory to create ramdisk."
        fi
}


### main script entry point

initialise    ""
$SETCOLOR_NORMAL
createramdisk ""

# try to find all the cdrom and partitions

find_cdroms ""

dbg "Devices to check: $CDROM_LIST\n"

if [ "$CDROM_LIST" = "" ]; then
	printfatal "Error: No suitable media for the livecd content found." \
	"Workaround: Copy the content of the livecd from your boot device to an IDE/SATA disk," \ 
	"eg. to /mnt/hda1/livecd.sqfs or C:\\livecd.sqfs Then try to boot again."
fi

# First see if bootfrom= cheatcode is given, Try that one first

bootfrom=`grep -iq bootfrom /proc/cmdline && echo 1`
if [ -n "$bootfrom" ]; then
	SOURCE_DEV=$(cat  /proc/cmdline|awk 'BEGIN {OFS="\n"} {$1=$1; print}'|awk '/bootfrom/ {print}'|awk -F"=" '{print $2}')
	LOOP_DEV=$(echo $SOURCE_DEV|awk -F/ '{print $1 "/" $2 "/" $3}')
	ISO_PATH=$(echo $SOURCE_DEV|sed "s|$LOOP_DEV||g" )
	case "$ISO_PATH" in /*.[iI][sS][oO]) ;; *) ISO_PATH="" ;; esac

	mkdir -p /part
	if [ -n "$ISO_PATH" ]; then #ISO_PATH doesn't work yet
		mount -r -o ro $LOOP_DEV /part || echo "could't mount the $LOOP_DEV partition"
		losetup /dev/loop1 /part$ISO_PATH
		mount -r -t iso9660 /dev/loop1 $MNTCDROM && printok || printfail
                if [ -e "$MNTCDROM/livecd.sqfs" ]; then
			losetup /dev/loop2 $MNTCDROM/livecd.sqfs
			mount -r -t squashfs /dev/loop2 $MNTLIVECD && LOOPMNT=1
			rm -rf /initrd/sbin/halt.local
		else
			printfatal "couldn't find the livecd.sqfs in the $bootfrom" 
		fi
	else
		findcloop "$LOOP_DEV"
	fi
	dbg "I am after bootfrom. The LOOPMNT is: $LOOPMNT\n"
fi

# no bootfrom -lets try all the mountable devices

if [ -z "$LOOPMNT" ]; then
	findcloop "$CDROM_LIST"
	dbg "I am after find_cloop The LOOPMNT is: $LOOPMNT\n"
fi

# Did we find _any_ livecd.sqfs?

if [ -z "$LOOPMNT" ]; then
	printfatal "ERROR: Unable to mount the livecd"
fi

echo "--- Exiting LINUXRC ----------------"
exec /etc/rc.d/rc.sysinit <dev/console >dev/console 2>&1
exit 0
